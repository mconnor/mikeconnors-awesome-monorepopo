---
import './Cluster.css';
// import type {
//   RmUnitType,
//   JustifyContentTypes,
//   AlignItemsTypes,
// } from '../Types.js';

// const LIST = 'list'

interface Props {
  justify?: string; //"flex-start"
  align?: string; // "flex-start"
  space?: string;
  // role?: typeof LIST
}

const {
  justify = 'flex-start',
  align = 'flex-start',
  space = 'var(--s1)',
} = Astro.props;
---

<cluster-l justify={justify} align={align} space={space}>
  <slot />
</cluster-l>

<script>
  /**
   * @module cluster-l
   * @description
   * A custom element for grouping items, with control over the margin between them
   * @property {string} justify=flex-start A CSS `justify-content` value
   * @property {string} align=flex-start A CSS `align-items` value
   * @property {string} space=var(--s1) A CSS `gap` value. The minimum space between the clustered child elements.
   */
  class Cluster extends HTMLElement {
    constructor() {
      super();
      this.render = () => {
        this.i = `Cluster-${[this.justify, this.align, this.space].join('')}`;
        this.dataset.i = this.i;
        if (!document.getElementById(this.i)) {
          const styleEl = document.createElement('style');
          styleEl.id = this.i;
          styleEl.innerHTML = `
           [data-i="${this.i}"] {
             justify-content: ${this.justify};
             align-items: ${this.align};
             gap: ${this.space};
           }
         `
            .replace(/\s{2,}/g, ' ')
            .trim();
          document.head.appendChild(styleEl);
        }
      };
    }

    get justify() {
      return this.getAttribute('justify') || 'flex-start';
    }

    set justify(val) {
      this.setAttribute('justify', val);
    }

    get align() {
      return this.getAttribute('align') || 'flex-start';
    }

    set align(val) {
      this.setAttribute('align', val);
    }

    get space() {
      return this.getAttribute('space') || 'var(--s1)';
    }

    set space(val) {
      this.setAttribute('space', val);
    }

    static get observedAttributes() {
      return ['justify', 'align', 'space'];
    }

    connectedCallback() {
      this.render();
    }

    attributeChangedCallback() {
      this.render();
    }
  }

  if ('customElements' in window) {
    customElements.define('cluster-l', Cluster);
  }
</script>

<!--
side	string	"left"	Which element to treat as the sidebar (all values but "left" are considered "right")
sideWidth	string		Represents the width of the sidebar when adjacent. If not set (null) it defaults to the sidebar's content width
contentMin	string	"50%"	A CSS percentage value. The minimum width of the content element in the horizontal configuration
space	string	"var(--s1)"	A CSS margin value representing the space between the two elements
noStretch	boolean	false	Make the adjacent elements adopt their natural height -->
