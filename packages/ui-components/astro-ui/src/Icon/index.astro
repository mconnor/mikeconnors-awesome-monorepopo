---
import iconPaths from '@repo/icon-paths/paths';
type IconType = keyof typeof iconPaths;

interface Props {
  icon: IconType;
  // color?: string;
  // gradient?: boolean;
  // size?: string;
  class: string;
}

const { class: className, icon } = Astro.props;

const iconPath = iconPaths[icon];

// const attrs: HTMLAttributes<'svg'> = {};
// if (size) attrs.style = { '--size': size };
---

<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 256 256"
  aria-hidden="true"
  class={className}
>
  <g set:html={iconPath} />
  <!-- {
    gradient && (
      <linearGradient
        id={gradientId}
        x1="23"
        x2="235"
        y1="43"
        y2="202"
        gradientUnits="userSpaceOnUse"
      >
        <stop stop-color="var(--gradient-stop-1)" />
        <stop offset=".5" stop-color="var(--gradient-stop-2)" />
        <stop offset="1" stop-color="var(--gradient-stop-3)" />
      </linearGradient>
    )
  } -->
</svg>
<!-- <svg
  xmlns="http://www.w3.org/2000/svg"
  width="40"
  height="40"
  viewBox="0 0 256 256"
  aria-hidden="true"
  class="fill-accent-600"
  stroke={gradient ? `url(#${gradientId})` : color}
  fill={gradient ? `url(#${gradientId})` : color}
  {...attrs}
>
  <g set:html={iconPath} />
  {
    gradient && (
      <linearGradient
        id={gradientId}
        x1="23"
        x2="235"
        y1="43"
        y2="202"
        gradientUnits="userSpaceOnUse"
      >
        <stop stop-color="var(--gradient-stop-1)" />
        <stop offset=".5" stop-color="var(--gradient-stop-2)" />
        <stop offset="1" stop-color="var(--gradient-stop-3)" />
      </linearGradient>
    )
  }
</svg> -->
<!-- 
<style>
  svg {
    vertical-align: middle;
    width: var(--size, 1em);
    height: var(--size, 1em);
  }
</style> -->
