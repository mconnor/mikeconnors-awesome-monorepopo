---
import { z } from 'astro:content';
import Filter from '#components/Filter.astro';
// import Stats from '#components/filterDemo/Stats.astro';
import FrameworkCard from '#components/FrameworkCard.astro';
import ProjectRow from '#components/ProjectRow.astro';

import { projectData } from '#app.config.ts';
import { zProjSchema } from '#schemas/index.ts';

import Layout from '#layouts/Layout.astro';

interface PrType {
  framework: 'svelte' | 'vue' | 'react';
  projectName: string;
  description: string;
  githubUrl: string;
  demoUrl: string;
}

const frameworkData = [
  {
    framework: 'svelte' as const,
    title: 'Svelte Application',
    description:
      'A modern, reactive framework that compiles to vanilla JavaScript for optimal performance.',
  },
  {
    framework: 'vue' as const,
    title: 'Vue.js Project',
    description:
      'Progressive framework for building user interfaces with excellent developer experience.',
  },
  {
    framework: 'react' as const,
    title: 'React Application',
    description:
      'A JavaScript library for building user interfaces with component-based architecture.',
  },
  {
    framework: 'svelte' as const,
    title: 'SvelteKit App',
    description:
      'Full-stack framework built on top of Svelte with server-side rendering capabilities.',
  },
  {
    framework: 'vue' as const,
    title: 'Nuxt.js Website',
    description:
      'The intuitive Vue framework for creating type-safe, performant web applications.',
  },
];

// type ProjDataType= keyof typeof projectData;
---

<Layout>
  <div class="mx-auto max-w-7xl p-8">
    <!-- Header -->
    <div class="border-1 mb-8 text-center">
      <h1 class="text-base-content mb-4 text-4xl font-bold">
        Framework Filter Demo
      </h1>
      <p class="text-base-content/70 mx-auto max-w-2xl text-lg">
        Use the filter below to toggle visibility of components based on their
        framework. This demonstrates how the DaisyUI Filter component can
        control other components.
      </p>
    </div>

    <!-- Filter Component -->
    <div class="border-1 mb-8 flex justify-center">
      <div class="card bg-base-100 shadow-lg">
        <div class="card-body items-center text-center">
          <h2 class="card-title mb-4">Filter by Framework</h2>
          <Filter />
        </div>
      </div>
    </div>

    <!-- Framework Cards Section -->
    <section class="border-1 mb-12">
      <h2 class="text-base-content mb-6 text-2xl font-bold">
        Framework Showcase
      </h2>
      <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {
          frameworkData.map((item) => (
            <FrameworkCard
              framework={item.framework}
              title={item.title}
              description={item.description}
            />
          ))
        }
      </div>
    </section>

    <!-- Projects Table Section -->
    <section>
      <h2 class="text-base-content mb-6 text-2xl font-bold">Projects Table</h2>

      <!-- <div class="card bg-base-100 shadow-lg w-full">
          <div class="card-body"> -->
      <div
        class="rounded-box border-base-content/5 bg-base-100 overflow-x-auto border"
      >
        <table class="table-zebra table table-auto">
          <thead>
            <tr>
              <th>Project</th>
              <th>Description</th>
              <th>Links</th>
            </tr>
          </thead>
          <tbody>
            {
              projectData.map((p) => (
                <ProjectRow project={zProjSchema.parse(p)} />
              ))
            }
          </tbody>
        </table>
      </div>

      <!-- </div>
        </div> -->
    </section>

    <!-- Additional Filterable Content -->
    <section class="border-1 mt-12">
      <!-- <Stats /> -->
      <h2 class="text-base-content mb-6 text-2xl font-bold">Quick Stats</h2>

      <div class="grid grid-cols-1 gap-6 md:grid-cols-3">
        <div
          class="bg-base-100 flex items-center gap-4 rounded-xl p-6 shadow-lg"
          data-framework="react"
        >
          <div class="text-accent">
            <span class="text-4xl">‚öõÔ∏è</span>
          </div>
          <div>
            <div class="text-base-content/60 text-sm font-medium">
              React Projects
            </div>
            <p class="text-primary text-3xl font-bold">2</p>
            <p class="text-base-content/70 text-sm">Dashboard & Blog</p>
          </div>
        </div>

        <div
          class="bg-base-100 flex items-center gap-4 rounded-xl p-6 shadow-lg"
          data-framework="svelte"
        >
          <div class="text-secondary">
            <span class="text-4xl">üî•</span>
          </div>
          <div>
            <div class="text-base-content/60 text-sm font-medium">
              Svelte Projects
            </div>
            <div class="text-secondary text-3xl font-bold">3</div>
            <div class="text-base-content/70 text-sm">
              Weather, Portfolio, SvelteKit
            </div>
          </div>
        </div>
        <!-- end of card -->
        <div
          class="bg-base-100 flex items-center gap-4 rounded-xl p-6 shadow-lg"
          data-framework="vue"
        >
          <div class="text-accent">
            <span class="text-4xl">üíö</span>
          </div>
          <div>
            <div class="text-base-content/60 text-sm font-medium">
              Vue Projects
            </div>
            <div class="text-accent text-3xl font-bold">2</div>
            <div class="text-base-content/70 text-sm">Tasks & Nuxt site</div>
          </div>
        </div>

        <!-- end of card -->
      </div>
    </section>
  </div>

  <!-- Custom Script for Enhanced Filtering -->
  <script>
    // Listen for filter changes and add smooth animations
    document.addEventListener('framework-filter-change', (event: Event) => {
      const customEvent = event as CustomEvent;
      const { filter } = customEvent.detail;
      console.log(`Filter changed to: ${filter}`);

      // Add fade-in animation to visible elements
      setTimeout(() => {
        const visibleElements = document.querySelectorAll(
          '[data-framework]:not(.hidden)',
        );
        visibleElements.forEach((element, index) => {
          (element as HTMLElement).style.opacity = '0';
          (element as HTMLElement).style.transform = 'translateY(20px)';

          setTimeout(() => {
            (element as HTMLElement).style.transition =
              'opacity 0.3s ease, transform 0.3s ease';
            (element as HTMLElement).style.opacity = '1';
            (element as HTMLElement).style.transform = 'translateY(0)';
          }, index * 50);
        });
      }, 100);
    });

    // Add counter updates when filter changes
    document.addEventListener('framework-filter-change', (event: Event) => {
      const customEvent = event as CustomEvent;
      const { filter } = customEvent.detail;

      // Update counters in real-time
      const frameworks = ['react', 'svelte', 'vue'];
      frameworks.forEach((framework) => {
        const elements = document.querySelectorAll(
          `[data-framework="${framework}"]`,
        );
        const visibleCount = Array.from(elements).filter(
          (el) => !el.classList.contains('hidden'),
        ).length;

        // Update any counter displays if they exist
        const counterElements = document.querySelectorAll(
          `[data-counter="${framework}"]`,
        );
        counterElements.forEach((counter) => {
          counter.textContent = visibleCount.toString();
        });
      });
    });
  </script>

  <style>
    /* Smooth transitions for all filterable elements */
    [data-framework] {
      transition:
        opacity 0.3s ease,
        transform 0.3s ease;
    }

    [data-framework].hidden {
      opacity: 0;
      transform: scale(0.95);
    }
  </style>
</Layout>
