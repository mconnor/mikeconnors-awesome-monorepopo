---
import Filter from '#components/Filter.astro';
import FrameworkCard from '#components/FrameworkCard.astro';
import ProjectRow from '#components/ProjectRow.astro';
import Layout from '#layouts/Layout.astro';
const frameworkData = [
  {
    framework: 'svelte' as const,
    title: 'Svelte Application',
    description: 'A modern, reactive framework that compiles to vanilla JavaScript for optimal performance.'
  },
  {
    framework: 'vue' as const,
    title: 'Vue.js Project',
    description: 'Progressive framework for building user interfaces with excellent developer experience.'
  },
  {
    framework: 'react' as const,
    title: 'React Application',
    description: 'A JavaScript library for building user interfaces with component-based architecture.'
  },
  {
    framework: 'svelte' as const,
    title: 'SvelteKit App',
    description: 'Full-stack framework built on top of Svelte with server-side rendering capabilities.'
  },
  {
    framework: 'vue' as const,
    title: 'Nuxt.js Website',
    description: 'The intuitive Vue framework for creating type-safe, performant web applications.'
  }
];

const projectData = [
  {
    framework: 'react' as const,
    projectName: 'E-commerce Dashboard',
    description: 'Admin dashboard for managing online store with React and TypeScript',
    githubUrl: 'https://github.com/example/react-dashboard',
    demoUrl: 'https://demo.example.com/react'
  },
  {
    framework: 'svelte' as const,
    projectName: 'Weather App',
    description: 'Real-time weather application built with SvelteKit',
    githubUrl: 'https://github.com/example/svelte-weather',
    demoUrl: 'https://demo.example.com/svelte'
  },
  {
    framework: 'vue' as const,
    projectName: 'Task Manager',
    description: 'Collaborative task management tool using Vue 3 Composition API',
    githubUrl: 'https://github.com/example/vue-tasks',
    demoUrl: 'https://demo.example.com/vue'
  },
  {
    framework: 'react' as const,
    projectName: 'Blog Platform',
    description: 'Modern blogging platform with React and MDX support',
    githubUrl: 'https://github.com/example/react-blog'
  },
  {
    framework: 'svelte' as const,
    projectName: 'Portfolio Site',
    description: 'Personal portfolio website showcasing Svelte animations',
    demoUrl: 'https://demo.example.com/portfolio'
  }
];
---


  <Layout>
    <div class="container mx-auto p-8">
      <!-- Header -->
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-base-content mb-4">
          Framework Filter Demo
        </h1>
        <p class="text-lg text-base-content/70 max-w-2xl mx-auto">
          Use the filter below to toggle visibility of components based on their framework.
          This demonstrates how the DaisyUI Filter component can control other components.
        </p>
      </div>

      <!-- Filter Component -->
      <div class="flex justify-center mb-8">
        <div class="card bg-base-100 shadow-lg">
          <div class="card-body items-center text-center">
            <h2 class="card-title mb-4">Filter by Framework</h2>
            <Filter />
          </div>
        </div>
      </div>

      <!-- Framework Cards Section -->
      <section class="mb-12">
        <h2 class="text-2xl font-bold text-base-content mb-6">Framework Showcase</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {frameworkData.map((item) => (
            <FrameworkCard
              framework={item.framework}
              title={item.title}
              description={item.description}
            />
          ))}
        </div>
      </section>

      <!-- Projects Table Section -->
      <section>
        <h2 class="text-2xl font-bold text-base-content mb-6">Projects Table</h2>
        <div class="card bg-base-100 shadow-lg">
          <div class="card-body">
            <div class="overflow-x-auto">
              <table class="table table-zebra w-full">
                <thead>
                  <tr>
                    <th>Project</th>
                    <th>Description</th>
                    <th>Links</th>
                  </tr>
                </thead>
                <tbody>
                  {projectData.map((project) => (
                    <ProjectRow
                      framework={project.framework}
                      projectName={project.projectName}
                      description={project.description}
                      githubUrl={project.githubUrl}
                      demoUrl={project.demoUrl}
                    />
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </section>

      <!-- Additional Filterable Content -->
      <section class="mt-12">
        <h2 class="text-2xl font-bold text-base-content mb-6">Quick Stats</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div class="stat bg-base-100 shadow-lg rounded-box" data-framework="react">
            <div class="stat-figure text-primary">
              <span class="text-3xl">‚öõÔ∏è</span>
            </div>
            <div class="stat-title">React Projects</div>
            <div class="stat-value text-primary">2</div>
            <div class="stat-desc">Dashboard & Blog</div>
          </div>

          <div class="stat bg-base-100 shadow-lg rounded-box" data-framework="svelte">
            <div class="stat-figure text-secondary">
              <span class="text-3xl">üî•</span>
            </div>
            <div class="stat-title">Svelte Projects</div>
            <div class="stat-value text-secondary">3</div>
            <div class="stat-desc">Weather, Portfolio, SvelteKit</div>
          </div>

          <div class="stat bg-base-100 shadow-lg rounded-box" data-framework="vue">
            <div class="stat-figure text-accent">
              <span class="text-3xl">üíö</span>
            </div>
            <div class="stat-title">Vue Projects</div>
            <div class="stat-value text-accent">2</div>
            <div class="stat-desc">Tasks & Nuxt site</div>
          </div>
        </div>
      </section>
    </div>

    <!-- Custom Script for Enhanced Filtering -->
    <script>
      // Listen for filter changes and add smooth animations
      document.addEventListener('framework-filter-change', (event: Event) => {
        const customEvent = event as CustomEvent;
        const { filter } = customEvent.detail;
        console.log(`Filter changed to: ${filter}`);

        // Add fade-in animation to visible elements
        setTimeout(() => {
          const visibleElements = document.querySelectorAll('[data-framework]:not(.hidden)');
          visibleElements.forEach((element, index) => {
            (element as HTMLElement).style.opacity = '0';
            (element as HTMLElement).style.transform = 'translateY(20px)';

            setTimeout(() => {
              (element as HTMLElement).style.transition = 'opacity 0.3s ease, transform 0.3s ease';
              (element as HTMLElement).style.opacity = '1';
              (element as HTMLElement).style.transform = 'translateY(0)';
            }, index * 50);
          });
        }, 100);
      });

      // Add counter updates when filter changes
      document.addEventListener('framework-filter-change', (event: Event) => {
        const customEvent = event as CustomEvent;
        const { filter } = customEvent.detail;

        // Update counters in real-time
        const frameworks = ['react', 'svelte', 'vue'];
        frameworks.forEach(framework => {
          const elements = document.querySelectorAll(`[data-framework="${framework}"]`);
          const visibleCount = Array.from(elements).filter(el => !el.classList.contains('hidden')).length;

          // Update any counter displays if they exist
          const counterElements = document.querySelectorAll(`[data-counter="${framework}"]`);
          counterElements.forEach(counter => {
            counter.textContent = visibleCount.toString();
          });
        });
      });
    </script>

    <style>
      /* Smooth transitions for all filterable elements */
      [data-framework] {
        transition: opacity 0.3s ease, transform 0.3s ease;
      }

      [data-framework].hidden {
        opacity: 0;
        transform: scale(0.95);
      }
    </style>
</Layout>

