---
import { getCollection } from 'astro:content';
import { z } from 'astro:content';
import Headline from '#components/Headline.astro';
import TagContainer from '#components/TagContainer/index.astro';
import Layout from '#layouts/Layout.astro';
import { tagCountTypeSchema, zTags } from '#schemas/index.js';

const allBlogPost = await getCollection('blogCollection');

/// we only need a list of unique tags and their counts
const slugTags = allBlogPost
  .filter((post) => post.data.draft !== true)
  .map((post) => ({
    id: post.id,
    tags: post.data.tags,
  }));

const zString = z.string().regex(/^[a-z](?:[a-z-]*[a-z])?$/);

const tagCountsObject = slugTags.reduce(
  (tagCountAcc, post) => {
    (post.tags || []).forEach((tag) => {
      const { success, data: _tag } = zString.safeParse(tag);
      if (success) {
        // Ensure tag is a string
        const count = tagCountAcc[_tag] || 0;
        tagCountAcc[_tag] = count + 1;
      } else {
        throw new Error('tag is not a string');
      }
    });
    return tagCountAcc;
  },
  {} as Record<string, number>,
);

const uniqueTagArray = [...new Set(slugTags.map((post) => post.tags).flat())];

const zUniqueTagArray = zTags.safeParse(uniqueTagArray);

const { success: tagCountSuccess, data: tagCountData } =
  tagCountTypeSchema.safeParse(tagCountsObject);

if (!tagCountSuccess) {
  throw new Error('Invalid tag count data');
}
---

<Layout title="Tag Index" description="Index of tags" title="Tags">
  {
    zUniqueTagArray.success && tagCountSuccess ?
      <div class="flex flex-col gap-y-6">
        <Headline headline="Announcements" />
        <TagContainer tags={zUniqueTagArray.data} tagCounts={tagCountData} />
      </div>
    : <p>No tags</p>
  }
</Layout>
