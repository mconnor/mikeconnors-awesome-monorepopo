---
import { getCollection } from 'astro:content';
import { z } from 'astro:content';
import Box from '@repo/ui-lit/Box';
import TagContainer from '#components/TagContainer.astro';
import Layout from '#layouts/Layout.astro';
import { tagCountTypeSchema, zTags } from '#schemas/index.js';

const allBlogPost = await getCollection('blog');

// const allBlogDataObjs = allBlogPost.map((post) => post);

/// we only need a list of unique tags and their counts
const slugTags = allBlogPost
  .filter((post) => post.data.draft !== true)
  .map((post) => ({
    id: post.id,
    tags: post.data.tags,
  }));

// const { success, data: zslugTagsDataArray } = z
//   .array(blogSchema)
//   .safeParse(slugTags);

// if (!success) {
//   throw new Error('Invalid blog post data');
// }

const zString = z.string();

const tagCountsObject = slugTags.reduce(
  (tagCountAcc, post) => {
    (post.tags || []).forEach((tag) => {
      const { success, data: _tag } = zString.safeParse(tag);
      if (success) {
        // Ensure tag is a string
        const count = tagCountAcc[_tag] || 0;
        tagCountAcc[_tag] = count + 1;
      } else {
        throw new Error('tag is not a string');
      }
    });
    return tagCountAcc;
  },
  {} as Record<string, number>,
);

const uniqueTagArray = [...new Set(slugTags.map((post) => post.tags).flat())];

const zUniqueTagArray = zTags.safeParse(uniqueTagArray);

const { success: tagCountSuccess, data: tagCountData } =
  tagCountTypeSchema.safeParse(tagCountsObject);

if (!tagCountSuccess) {
  throw new Error('Invalid tag count data');
}
---

<Layout title="Tag Index" description="Index of tags">
  <Box padding="2rem">
    {
      zUniqueTagArray.success && tagCountSuccess ?
        <TagContainer tags={zUniqueTagArray.data} tagCounts={tagCountData} />
      : <p>No tags</p>
    }
  </Box>
</Layout>
