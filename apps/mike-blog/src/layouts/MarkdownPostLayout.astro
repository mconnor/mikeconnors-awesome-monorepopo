---
import Layout from '#layouts/Layout.astro';
import { Image } from 'astro:assets';

import LocalImg from '#components/PostList/LocalImg.astro';
import Headline from '#components/Headline.astro';
import { type CollectionEntry } from 'astro:content';
import Prose from '#components/Prose.astro';
import Stack from '@repo/layout-webcomponents/Stack';
import Author from '#components/Author/index.astro';
// import BlogPicWrapper from '#components/BlogPicWrapper.astro';

import { ImageSchema, WebImageSchema } from '#schemas/Utils.ts';

import Tag from '#components/TagContainer/Tag.astro';
// interface Props extends CollectionEntry<'blogCollection'> {}

import { format } from 'date-fns';

type Props = CollectionEntry<'blogCollection'>;
const { data } = Astro.props;
const { tags, title, description, date, cover, author: authorRef } = data;

// ImageSchema.safeParse(cover);
// let authorObj;
// if (author) {
//   authorObj = await getEntry('authorsCollection', author.id);
// }

// if (authorObj === undefined) {
//   return Astro.redirect('/404');
// }

// width={1020} height={510}
const W = 1020;
const H = 510;
---

<!-- TODO: fix the date format -->
<Layout title={title} description={description} maxW="100%">
  <!-- <h1>The current URL is: {Astro.url}</h1>
  <h1>The current URL pathname is: {Astro.url.pathname}</h1>
  <h1>The current URL origin is: {Astro.url.origin}</h1> -->

  <!-- <h1 class="">{title}</h1> -->
  <Stack space="var(--s1)">
    <Headline headline={title} />

    {date && <p>Pub.on: {format(date, 'yyyy-MM-dd')}</p>}

    {
      cover && WebImageSchema.safeParse(cover).success ?
        <Image src={cover.src} alt={cover.alt} width={W} height={H} />
      : cover &&
        ImageSchema.safeParse(cover).success && (
          //  <Image src={cover.src} alt={cover.alt} width={W} height={H} />
          <LocalImg imagePath={cover.src} altText={cover.alt} />
        )
    }

    {authorRef && <Author authorReference={authorRef} />}
    <div class="">
      <Prose>
        <slot />
      </Prose>
    </div>
    <div class="">
      {
        tags && (
          <div class="flex flex-wrap gap-2">
            {tags.map((tag) => (
              // <span class="inline-flex items-center rounded-full bg-blue-100 px-2 py-1 text-xs font-medium text-blue-800">
              //   {tag}
              // </span>
              <Tag tag={tag} />
            ))}
          </div>
        )
      }
    </div>
  </Stack>
</Layout>
