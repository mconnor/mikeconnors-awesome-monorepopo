---
interface Props {
  domain?: string;
  user?: string;
  buttonText?: string;
}

const {
  domain = 'mikeconnor.tech',
  user = 'info',
  buttonText = 'email me',
} = Astro.props;

// Pre-encode the email parts on the server-side
const encodeToEntities = (text: string) => {
  return Array.from(text)
    .map((char) => `&#${char.charCodeAt(0)};`)
    .join('');
};

const encodedUser = encodeToEntities(user);
const encodedDomain = encodeToEntities(domain);
---

<mailto-button
  data-domain={encodedDomain}
  data-user={encodedUser}
  data-text={buttonText}
>
  <a class="btn btn-primary" aria-label="Send an email"></a>
  <!-- <noscript>

    <div>
      {buttonText}: {user.slice(0, 1)}••• [at] {
        domain.split('.')[0].slice(0, 1)
      }••• dot {domain.split('.')[1].slice(0, 1)}•••
    </div>
  </noscript> -->
</mailto-button>

<script>
  import { actions } from 'astro:actions';
  import { navigate } from 'astro:transitions/client';

  export class MailtoButton extends HTMLElement {
    // Decode HTML entities back to text
    private decodeEntities(encoded: string): string {
      const textarea = document.createElement('textarea');
      textarea.innerHTML = encoded;
      return textarea.value;
    }

    // Create a partially obscured version of the email parts
    private obfuscateEmailPart(encodedText: string): string {
      const decoded = this.decodeEntities(encodedText);
      if (decoded.length <= 3) return decoded;

      // Show first character and last character, obscure the middle
      const firstChar = decoded.charAt(0);
      const lastChar = decoded.charAt(decoded.length - 1);
      const middleChars = '•'.repeat(decoded.length - 2);

      return `${firstChar}${middleChars}${lastChar}`;
    }

    connectedCallback() {
      const link = this.querySelector('a');
      if (!link) return;

      const encodedUser = this.dataset.user;
      const encodedDomain = this.dataset.domain;

      if (!encodedUser || !encodedDomain) {
        console.error('No user or domain provided');
        return;
      }

      // Get custom button text
      const buttonText = this.dataset.text || 'email me';

      // Display obscured version for UI
      const displayUser = this.obfuscateEmailPart(encodedUser);
      const displayDomain = this.obfuscateEmailPart(encodedDomain);

      // Set display text that doesn't show the actual email
      link.innerText = `${buttonText}: ${displayUser} [at] ${displayDomain}`;

      // Don't set the href attribute until clicked
      link.removeAttribute('href');

      // Only create the actual mailto link when clicked
      link.addEventListener('click', (event) => {
        event.preventDefault();

        const user = this.decodeEntities(encodedUser);
        const domain = this.decodeEntities(encodedDomain);

        // Create and use the actual email only on click
        window.location.href = `mailto:${user}@${domain}`;
      });
    }
  }

  customElements.define('mailto-button', MailtoButton);

  declare global {
    interface HTMLElementTagNameMap {
      'mailto-button': MailtoButton;
    }
  }
</script>
